	 18 struct nameidata {
	 19         struct path     path;   //保存当前路径分量的父路径，在该路径下查找路径分量
	 20         struct qstr     last;   //last包含了需要查找的名称，它是一个快速字符串，不仅包含字符串本身，还包含字符串长度和一个散列值。
	 21         struct path     root;   //当从根目录开始查找，需要设置root
	 22         unsigned int    flags;
	 23         int             last_type;  //路径名最后一个分量类型(当LOOKUP_PAPRENT设置时使用)
	 24         unsigned        depth;      //符号链接嵌套的当前级别
	 25         char *saved_names[MAX_NESTED_LINKS + 1];   //与嵌套的符号链接关联的路径名数组
	 27         /* Intent data */
	 28         union {
	 29                 struct open_intent open;    //单个成员联合体，指定如何访问文件
	 30         } intent;
	 31 };


static int path_lookupat(int dfd,const char*name,unsigned int flags,struct nameidata*nd)
dfd的含义：
1、当路径为相对路径，并dfd为特殊值AT_FDCWD,它被解释为相对于调用进程的当前工作目录。
2、当路径为相对路径，且没有设置，则从dfd指定的文件目录开始查找
3、当路径为绝对路径，dfd被忽略，从根目录开始查找
当path_lookup()返回时，结果参数nd指向的nameidata结构用与路径名查找操作有关的数据来填充：
